// ignore_for_file: use_build_context_synchronously

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'controller_drag.dart';
import 'task_template.dart';

class TaskBoardScreen extends StatelessWidget {
  TaskBoardScreen({super.key});

  // Get the TaskController instance already registered in main or a parent widget
  final TaskController controller = Get.find<TaskController>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Task Board'),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => _showAddTaskDialog(context),
          ),
        ],
      ),
      body: Row(
        children: [
          // Column 1: To Do
          Expanded(
            child: DragTargetWidget(
              status: 'todo',
              title: 'To Do',
            ),
          ),
          // Column 2: In Progress
          Expanded(
            child: DragTargetWidget(
              status: 'inProgress',
              title: 'In Progress',
            ),
          ),
          // Column 3: Done
          Expanded(
            child: DragTargetWidget(
              status: 'done',
              title: 'Done',
            ),
          ),
        ],
      ),
    );
  }

  // Show a dialog to add a new task
  void _showAddTaskDialog(BuildContext context) {
    final assignedByController = TextEditingController();
    final assignedToController = TextEditingController();
    final taskNameController = TextEditingController();
    final taskDescriptionController = TextEditingController();
    final dateController = TextEditingController(
      text: DateTime.now().toString().split(' ')[0], // Just for simplicity
    );

    showDialog(
      context: context,
      builder: (_) {
        return AlertDialog(
          title: const Text('Add Task'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: assignedByController,
                  decoration: const InputDecoration(labelText: 'Assigned By'),
                ),
                TextField(
                  controller: assignedToController,
                  decoration: const InputDecoration(labelText: 'Assigned To'),
                ),
                TextField(
                  controller: dateController,
                  decoration: const InputDecoration(labelText: 'Date'),
                ),
                TextField(
                  controller: taskNameController,
                  decoration: const InputDecoration(labelText: 'Task Name'),
                ),
                TextField(
                  controller: taskDescriptionController,
                  decoration:
                      const InputDecoration(labelText: 'Task Description'),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () async {
                final task = TaskModel(
                  id: '', // Will be generated by Firestore snapshot listener
                  assignedBy: assignedByController.text.trim(),
                  assignedTo: assignedToController.text.trim(),
                  date: DateTime.tryParse(dateController.text) ??
                      DateTime.now(),
                  taskName: taskNameController.text.trim(),
                  taskDescription: taskDescriptionController.text.trim(),
                  status: 'todo',
                );
                await controller.addTask(task);
                Navigator.pop(context);
              },
              child: const Text('Add'),
            ),
          ],
        );
      },
    );
  }
}

class DragTargetWidget extends StatelessWidget {
  final String status;
  final String title;

  DragTargetWidget({
    super.key,
    required this.status,
    required this.title,
  });

  // Retrieve the controller instance rather than putting a new one.
  final TaskController controller = Get.find<TaskController>();

  @override
  Widget build(BuildContext context) {
    return Obx(() {
      final tasksByStatus = controller.getTasksByStatus(status);

      return Container(
        color: Colors.grey[200],
        child: Column(
          children: [
            Container(
              color: Colors.blue,
              padding: const EdgeInsets.all(8.0),
              child: Center(
                child: Text(
                  title,
                  style: const TextStyle(color: Colors.white, fontSize: 18),
                ),
              ),
            ),
            Expanded(
              child: DragTarget<TaskModel>(
                builder: (context, candidateData, rejectedData) {
                  return ListView.builder(
                    itemCount: tasksByStatus.length,
                    itemBuilder: (context, index) {
                      final task = tasksByStatus[index];
                      return _buildDraggableCard(task);
                    },
                  );
                },
                onWillAccept: (data) {
                  print('onWillAccept: ${data?.taskName}');
                  return data != null;
                },
                onAccept: (data) {
                  print('onAccept: Moving ${data.taskName} to $status');
                  controller.updateTaskStatus(data.id, status);
                },
              ),
            ),
          ],
        ),
      );
    });
  }

  Widget _buildDraggableCard(TaskModel task) {
    return Draggable<TaskModel>(
      data: task,
      feedback: Material(
        color: Colors.transparent,
        child: _buildTaskCard(task, isDragging: true),
      ),
      childWhenDragging: Opacity(
        opacity: 0.5,
        child: _buildTaskCard(task),
      ),
      child: _buildTaskCard(task),
    );
  }

  Widget _buildTaskCard(TaskModel task, {bool isDragging = false}) {
    return Card(
      elevation: 3,
      margin: const EdgeInsets.all(8.0),
      child: ListTile(
        title: Text(task.taskName),
        subtitle: Text(
          'Assigned By: ${task.assignedBy}\n'
          'Assigned To: ${task.assignedTo}\n'
          'Date: ${task.date.toString().split(' ')[0]}\n'
          'Description: ${task.taskDescription}',
        ),
        isThreeLine: true,
        tileColor: isDragging ? Colors.grey[300] : Colors.white,
      ),
    );
  }
}
